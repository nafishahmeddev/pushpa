/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const SettingsLazyImport = createFileRoute('/settings')()
const PosLazyImport = createFileRoute('/pos')()
const IndexLazyImport = createFileRoute('/')()
const UsersIndexLazyImport = createFileRoute('/users/')()
const PosIndexLazyImport = createFileRoute('/pos/')()
const OrdersIndexLazyImport = createFileRoute('/orders/')()
const InvoicesIndexLazyImport = createFileRoute('/invoices/')()
const PosOrderIdLazyImport = createFileRoute('/pos/$orderId')()
const AuthLoginLazyImport = createFileRoute('/auth/login')()
const SettingsTablesIndexLazyImport = createFileRoute('/settings/tables/')()
const SettingsProductsIndexLazyImport = createFileRoute('/settings/products/')()
const SettingsLocationsIndexLazyImport = createFileRoute(
  '/settings/locations/',
)()
const SettingsDetailsIndexLazyImport = createFileRoute('/settings/details/')()
const SettingsCategoriesIndexLazyImport = createFileRoute(
  '/settings/categories/',
)()

// Create/Update Routes

const SettingsLazyRoute = SettingsLazyImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))

const PosLazyRoute = PosLazyImport.update({
  id: '/pos',
  path: '/pos',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/pos.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const UsersIndexLazyRoute = UsersIndexLazyImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/users/index.lazy').then((d) => d.Route))

const PosIndexLazyRoute = PosIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PosLazyRoute,
} as any).lazy(() => import('./routes/pos/index.lazy').then((d) => d.Route))

const OrdersIndexLazyRoute = OrdersIndexLazyImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/orders/index.lazy').then((d) => d.Route))

const InvoicesIndexLazyRoute = InvoicesIndexLazyImport.update({
  id: '/invoices/',
  path: '/invoices/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/invoices/index.lazy').then((d) => d.Route),
)

const PosOrderIdLazyRoute = PosOrderIdLazyImport.update({
  id: '/$orderId',
  path: '/$orderId',
  getParentRoute: () => PosLazyRoute,
} as any).lazy(() => import('./routes/pos/$orderId.lazy').then((d) => d.Route))

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/login.lazy').then((d) => d.Route))

const SettingsTablesIndexLazyRoute = SettingsTablesIndexLazyImport.update({
  id: '/tables/',
  path: '/tables/',
  getParentRoute: () => SettingsLazyRoute,
} as any).lazy(() =>
  import('./routes/settings/tables/index.lazy').then((d) => d.Route),
)

const SettingsProductsIndexLazyRoute = SettingsProductsIndexLazyImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => SettingsLazyRoute,
} as any).lazy(() =>
  import('./routes/settings/products/index.lazy').then((d) => d.Route),
)

const SettingsLocationsIndexLazyRoute = SettingsLocationsIndexLazyImport.update(
  {
    id: '/locations/',
    path: '/locations/',
    getParentRoute: () => SettingsLazyRoute,
  } as any,
).lazy(() =>
  import('./routes/settings/locations/index.lazy').then((d) => d.Route),
)

const SettingsDetailsIndexLazyRoute = SettingsDetailsIndexLazyImport.update({
  id: '/details/',
  path: '/details/',
  getParentRoute: () => SettingsLazyRoute,
} as any).lazy(() =>
  import('./routes/settings/details/index.lazy').then((d) => d.Route),
)

const SettingsCategoriesIndexLazyRoute =
  SettingsCategoriesIndexLazyImport.update({
    id: '/categories/',
    path: '/categories/',
    getParentRoute: () => SettingsLazyRoute,
  } as any).lazy(() =>
    import('./routes/settings/categories/index.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/pos': {
      id: '/pos'
      path: '/pos'
      fullPath: '/pos'
      preLoaderRoute: typeof PosLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/pos/$orderId': {
      id: '/pos/$orderId'
      path: '/$orderId'
      fullPath: '/pos/$orderId'
      preLoaderRoute: typeof PosOrderIdLazyImport
      parentRoute: typeof PosLazyImport
    }
    '/invoices/': {
      id: '/invoices/'
      path: '/invoices'
      fullPath: '/invoices'
      preLoaderRoute: typeof InvoicesIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/orders/': {
      id: '/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/pos/': {
      id: '/pos/'
      path: '/'
      fullPath: '/pos/'
      preLoaderRoute: typeof PosIndexLazyImport
      parentRoute: typeof PosLazyImport
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings/categories/': {
      id: '/settings/categories/'
      path: '/categories'
      fullPath: '/settings/categories'
      preLoaderRoute: typeof SettingsCategoriesIndexLazyImport
      parentRoute: typeof SettingsLazyImport
    }
    '/settings/details/': {
      id: '/settings/details/'
      path: '/details'
      fullPath: '/settings/details'
      preLoaderRoute: typeof SettingsDetailsIndexLazyImport
      parentRoute: typeof SettingsLazyImport
    }
    '/settings/locations/': {
      id: '/settings/locations/'
      path: '/locations'
      fullPath: '/settings/locations'
      preLoaderRoute: typeof SettingsLocationsIndexLazyImport
      parentRoute: typeof SettingsLazyImport
    }
    '/settings/products/': {
      id: '/settings/products/'
      path: '/products'
      fullPath: '/settings/products'
      preLoaderRoute: typeof SettingsProductsIndexLazyImport
      parentRoute: typeof SettingsLazyImport
    }
    '/settings/tables/': {
      id: '/settings/tables/'
      path: '/tables'
      fullPath: '/settings/tables'
      preLoaderRoute: typeof SettingsTablesIndexLazyImport
      parentRoute: typeof SettingsLazyImport
    }
  }
}

// Create and export the route tree

interface PosLazyRouteChildren {
  PosOrderIdLazyRoute: typeof PosOrderIdLazyRoute
  PosIndexLazyRoute: typeof PosIndexLazyRoute
}

const PosLazyRouteChildren: PosLazyRouteChildren = {
  PosOrderIdLazyRoute: PosOrderIdLazyRoute,
  PosIndexLazyRoute: PosIndexLazyRoute,
}

const PosLazyRouteWithChildren =
  PosLazyRoute._addFileChildren(PosLazyRouteChildren)

interface SettingsLazyRouteChildren {
  SettingsCategoriesIndexLazyRoute: typeof SettingsCategoriesIndexLazyRoute
  SettingsDetailsIndexLazyRoute: typeof SettingsDetailsIndexLazyRoute
  SettingsLocationsIndexLazyRoute: typeof SettingsLocationsIndexLazyRoute
  SettingsProductsIndexLazyRoute: typeof SettingsProductsIndexLazyRoute
  SettingsTablesIndexLazyRoute: typeof SettingsTablesIndexLazyRoute
}

const SettingsLazyRouteChildren: SettingsLazyRouteChildren = {
  SettingsCategoriesIndexLazyRoute: SettingsCategoriesIndexLazyRoute,
  SettingsDetailsIndexLazyRoute: SettingsDetailsIndexLazyRoute,
  SettingsLocationsIndexLazyRoute: SettingsLocationsIndexLazyRoute,
  SettingsProductsIndexLazyRoute: SettingsProductsIndexLazyRoute,
  SettingsTablesIndexLazyRoute: SettingsTablesIndexLazyRoute,
}

const SettingsLazyRouteWithChildren = SettingsLazyRoute._addFileChildren(
  SettingsLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/pos': typeof PosLazyRouteWithChildren
  '/settings': typeof SettingsLazyRouteWithChildren
  '/auth/login': typeof AuthLoginLazyRoute
  '/pos/$orderId': typeof PosOrderIdLazyRoute
  '/invoices': typeof InvoicesIndexLazyRoute
  '/orders': typeof OrdersIndexLazyRoute
  '/pos/': typeof PosIndexLazyRoute
  '/users': typeof UsersIndexLazyRoute
  '/settings/categories': typeof SettingsCategoriesIndexLazyRoute
  '/settings/details': typeof SettingsDetailsIndexLazyRoute
  '/settings/locations': typeof SettingsLocationsIndexLazyRoute
  '/settings/products': typeof SettingsProductsIndexLazyRoute
  '/settings/tables': typeof SettingsTablesIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/settings': typeof SettingsLazyRouteWithChildren
  '/auth/login': typeof AuthLoginLazyRoute
  '/pos/$orderId': typeof PosOrderIdLazyRoute
  '/invoices': typeof InvoicesIndexLazyRoute
  '/orders': typeof OrdersIndexLazyRoute
  '/pos': typeof PosIndexLazyRoute
  '/users': typeof UsersIndexLazyRoute
  '/settings/categories': typeof SettingsCategoriesIndexLazyRoute
  '/settings/details': typeof SettingsDetailsIndexLazyRoute
  '/settings/locations': typeof SettingsLocationsIndexLazyRoute
  '/settings/products': typeof SettingsProductsIndexLazyRoute
  '/settings/tables': typeof SettingsTablesIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/pos': typeof PosLazyRouteWithChildren
  '/settings': typeof SettingsLazyRouteWithChildren
  '/auth/login': typeof AuthLoginLazyRoute
  '/pos/$orderId': typeof PosOrderIdLazyRoute
  '/invoices/': typeof InvoicesIndexLazyRoute
  '/orders/': typeof OrdersIndexLazyRoute
  '/pos/': typeof PosIndexLazyRoute
  '/users/': typeof UsersIndexLazyRoute
  '/settings/categories/': typeof SettingsCategoriesIndexLazyRoute
  '/settings/details/': typeof SettingsDetailsIndexLazyRoute
  '/settings/locations/': typeof SettingsLocationsIndexLazyRoute
  '/settings/products/': typeof SettingsProductsIndexLazyRoute
  '/settings/tables/': typeof SettingsTablesIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/pos'
    | '/settings'
    | '/auth/login'
    | '/pos/$orderId'
    | '/invoices'
    | '/orders'
    | '/pos/'
    | '/users'
    | '/settings/categories'
    | '/settings/details'
    | '/settings/locations'
    | '/settings/products'
    | '/settings/tables'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings'
    | '/auth/login'
    | '/pos/$orderId'
    | '/invoices'
    | '/orders'
    | '/pos'
    | '/users'
    | '/settings/categories'
    | '/settings/details'
    | '/settings/locations'
    | '/settings/products'
    | '/settings/tables'
  id:
    | '__root__'
    | '/'
    | '/pos'
    | '/settings'
    | '/auth/login'
    | '/pos/$orderId'
    | '/invoices/'
    | '/orders/'
    | '/pos/'
    | '/users/'
    | '/settings/categories/'
    | '/settings/details/'
    | '/settings/locations/'
    | '/settings/products/'
    | '/settings/tables/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  PosLazyRoute: typeof PosLazyRouteWithChildren
  SettingsLazyRoute: typeof SettingsLazyRouteWithChildren
  AuthLoginLazyRoute: typeof AuthLoginLazyRoute
  InvoicesIndexLazyRoute: typeof InvoicesIndexLazyRoute
  OrdersIndexLazyRoute: typeof OrdersIndexLazyRoute
  UsersIndexLazyRoute: typeof UsersIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  PosLazyRoute: PosLazyRouteWithChildren,
  SettingsLazyRoute: SettingsLazyRouteWithChildren,
  AuthLoginLazyRoute: AuthLoginLazyRoute,
  InvoicesIndexLazyRoute: InvoicesIndexLazyRoute,
  OrdersIndexLazyRoute: OrdersIndexLazyRoute,
  UsersIndexLazyRoute: UsersIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/pos",
        "/settings",
        "/auth/login",
        "/invoices/",
        "/orders/",
        "/users/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/pos": {
      "filePath": "pos.lazy.tsx",
      "children": [
        "/pos/$orderId",
        "/pos/"
      ]
    },
    "/settings": {
      "filePath": "settings.lazy.tsx",
      "children": [
        "/settings/categories/",
        "/settings/details/",
        "/settings/locations/",
        "/settings/products/",
        "/settings/tables/"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login.lazy.tsx"
    },
    "/pos/$orderId": {
      "filePath": "pos/$orderId.lazy.tsx",
      "parent": "/pos"
    },
    "/invoices/": {
      "filePath": "invoices/index.lazy.tsx"
    },
    "/orders/": {
      "filePath": "orders/index.lazy.tsx"
    },
    "/pos/": {
      "filePath": "pos/index.lazy.tsx",
      "parent": "/pos"
    },
    "/users/": {
      "filePath": "users/index.lazy.tsx"
    },
    "/settings/categories/": {
      "filePath": "settings/categories/index.lazy.tsx",
      "parent": "/settings"
    },
    "/settings/details/": {
      "filePath": "settings/details/index.lazy.tsx",
      "parent": "/settings"
    },
    "/settings/locations/": {
      "filePath": "settings/locations/index.lazy.tsx",
      "parent": "/settings"
    },
    "/settings/products/": {
      "filePath": "settings/products/index.lazy.tsx",
      "parent": "/settings"
    },
    "/settings/tables/": {
      "filePath": "settings/tables/index.lazy.tsx",
      "parent": "/settings"
    }
  }
}
ROUTE_MANIFEST_END */
